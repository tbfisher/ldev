#!/usr/bin/env bash

# Sets up bash environment.

# Gets the directory containing this file.
LDEV_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# absolute path to this script
# shellcheck disable=2034
LDEV_ENV_SCRIPT="$LDEV_SCRIPT_DIR/$(basename "${BASH_SOURCE[0]}")"

# shellcheck source=inc/util.sh
source "$LDEV_SCRIPT_DIR/inc/util.sh"
# shellcheck source=inc/docker.sh
source "$LDEV_SCRIPT_DIR/inc/docker.sh"

# ldev root directory
LDEV_PROJ_DIR=$(util::realpath "$LDEV_SCRIPT_DIR/..")

# Include docker-compose env, creating if necessary.
if [[ ! -f $LDEV_PROJ_DIR/.env ]]; then
    cp "$LDEV_PROJ_DIR/env_example" "$LDEV_PROJ_DIR/.env"
fi
# shellcheck disable=SC1090
source "$LDEV_PROJ_DIR/.env"

# ldev scripts
LDEV_BUILD_SCRIPT="$LDEV_SCRIPT_DIR/$LDEV_BUILD_SCRIPT_BASENAME"
LDEV_PULL_SCRIPT="$LDEV_SCRIPT_DIR/$LDEV_PULL_SCRIPT_BASENAME"
LDEV_XDEBUG_SCRIPT="$LDEV_SCRIPT_DIR/$LDEV_XDEBUG_SCRIPT_BASENAME"

# PHP container, for running drush commands, etc.
LDEV_PHP_CONTAINER=php
# Path to drush in container.
LDEV_DRUSH_CONTAINER=/var/www/vendor/bin/drush
# path to drush on host.
LDEV_DRUSH_LOCAL=$LDEV_PROJ_DIR/code/example8/vendor/bin/drush
# Drush --uri value.
LDEV_DRUSH_URI="https://$LDEV_PRIMARY_DOMAIN.$LDEV_BASE_DOMAIN"
# Database container.
LDEV_MYSQL_CONTAINER=db
# Database creds.
LDEV_MYSQL_USER=root
LDEV_MYSQL_PASS=$LDEV_DATABASE_PASSWORD
LDEV_MYSQL_DB=$LDEV_DATABASE_NAME

# drush as webserver user
drush() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -it \
        --env COLUMNS=$COLUMNS --env LINES=$LINES \
        --user www-data:www-data \
        "$(docker-compose ps -q $LDEV_PHP_CONTAINER)" \
        $LDEV_DRUSH_CONTAINER --uri="$LDEV_DRUSH_URI" "$@"
    )
}
# drush as webserver user, with remote debugging
drush-debug() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -it \
        --env COLUMNS=$COLUMNS --env LINES=$LINES \
        --env "XDEBUG_CONFIG=remote_enable=1" \
        --env "PHP_IDE_CONFIG=serverName=$LDEV_PRIMARY_DOMAIN.$LDEV_BASE_DOMAIN" \
        --user www-data:www-data \
        "$(docker-compose ps -q $LDEV_PHP_CONTAINER)" \
        $LDEV_DRUSH_CONTAINER --uri="$LDEV_DRUSH_URI" "$@"
    )
}
# drush as webserver user, with profiling
drush-profile() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -it \
        --env COLUMNS=$COLUMNS --env LINES=$LINES \
        --env "XDEBUG_CONFIG=profiler_enable=1" \
        --user www-data:www-data \
        "$(docker-compose ps -q $LDEV_PHP_CONTAINER)" \
        $LDEV_DRUSH_CONTAINER --uri="$LDEV_DRUSH_URI" "$@"
    )
}
# drush as root user (in case you want drush to write code)
drush-root() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -it \
        --env COLUMNS=$COLUMNS --env LINES=$LINES \
        --user root:www-data \
        "$(docker-compose ps -q $LDEV_PHP_CONTAINER)" \
        $LDEV_DRUSH_CONTAINER --uri="$LDEV_DRUSH_URI" "$@"
    )
}

# since we've aliased `drush`, provide a way to run drush on host
drush-local() {
    $LDEV_DRUSH_LOCAL "$@"
}

# interactive mysql in db container
mysql() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -it \
        --env COLUMNS=$COLUMNS --env LINES=$LINES \
        "$(docker-compose ps -q $LDEV_MYSQL_CONTAINER)" \
        mysql --user=$LDEV_MYSQL_USER --password="$LDEV_MYSQL_PASS" "$LDEV_MYSQL_DB" "$@"
    )
}
# non-interative, for piping e.g. `cat some.sql | mysql-pipe`
mysql-pipe() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -i \
        "$(docker-compose ps -q $LDEV_MYSQL_CONTAINER)" \
        mysql --user=$LDEV_MYSQL_USER --password="$LDEV_MYSQL_PASS" "$LDEV_MYSQL_DB"
    )
}
# non-interative mysql-dump
mysqldump() {
    (
    cd "$LDEV_PROJ_DIR" &&
    docker exec -i \
        "$(docker-compose ps -q $LDEV_MYSQL_CONTAINER)" \
        mysqldump --user=$LDEV_MYSQL_USER --password="$LDEV_MYSQL_PASS" "$LDEV_MYSQL_DB"
    )
}

# build script
build() {
    $LDEV_BUILD_SCRIPT "$@"
}

# pull script
pull() {
    $LDEV_PULL_SCRIPT "$@"
}

# enable/disable xdebug in a php-fpm container
xdebug() {
    export LDEV_ENV_SCRIPT
    $LDEV_XDEBUG_SCRIPT "$@"
}
