#!/usr/bin/env bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail
# debugging
# set -x

# Create docker-compose .env if necessary.
if [[ ! -f .env ]]; then
    cp env_example .env
fi

# drupal
conf_path=conf/example8
build_path=code/example8
if [ ! -d $build_path ]; then
    echo installing drupal
    git_origin=ssh://codeserver.dev.aa220cfa-f0a4-4d49-a578-5aff16add5e9@codeserver.dev.aa220cfa-f0a4-4d49-a578-5aff16add5e9.drush.in:2222/~/repository.git
    git_branch=master
    #git_mirror=

    git clone --branch "$git_branch" "$git_origin" $build_path

    ## push to mirror repo when pushing to platform repo
    #git -C $build_path remote add c3 "$git_mirror"
    #git -C $build_path remote set-url origin --push "$git_origin"
    #git -C $build_path remote set-url origin --push --add "$git_mirror"
    #git -C $build_path fetch --all

    composer install -d $build_path
fi
echo configuring drupal
chmod +w $build_path/sites/default
rm -rf $build_path/sites/default/settings.local.php
cp $conf_path/sites/default/settings.local.php $build_path/sites/default/
# config_split
rm -rf $build_path/sites/default/config-local
cp -r $conf_path/sites/default/config-local $build_path/sites/default/config-local
# map files directories to volumes so they survive container destruction.
# @see docker-compose.yml
rm -rf $build_path/sites/default/files
ln -sf /var/www_files/public $build_path/sites/default/files
#ln -sf /var/www_files/private $build_path/sites/default/private
chmod -w $build_path/sites/default
