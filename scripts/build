#!/usr/bin/env bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail
# debugging
# set -x

# Create docker-compose .env if necessary.
if [[ ! -f .env ]]; then
    cp env_example .env
fi

# drush
if [ ! -d code/drush ]; then
    echo installing drush
    git clone --depth 1 --branch 8.2.1 git@github.com:drush-ops/drush.git code/drush
    composer --working-dir=code/drush install -o --no-dev
    ./code/drush/drush dl --destination=code/drush/commands registry_rebuild-7.x composer-8.x
fi

# drupal
conf_path=conf/example7
build_path=code/example7
if [ ! -d $build_path ]; then
    echo installing drupal
    git_origin=https://git.drupalcode.org/project/drupal.git
    git_branch=7.x
    #git_mirror=

    git clone --branch "$git_branch" "$git_origin" $build_path

    ## push to mirror repo when pushing to platform repo
    #git -C $build_path remote add c3 "$git_mirror"
    #git -C $build_path remote set-url origin --push "$git_origin"
    #git -C $build_path remote set-url origin --push --add "$git_mirror"
    #git -C $build_path fetch --all

    cp $build_path/sites/default/default.settings.php $build_path/sites/default/settings.php
    php=$(cat <<'EOS'

// If there is a local settings file, then include it.
$local_settings = __DIR__ . "/settings.local.php";
if (file_exists($local_settings)) {
  include $local_settings;
}
EOS
)
    echo "$php" >> $build_path/sites/default/settings.php
fi
echo configuring drupal
chmod +w $build_path/sites/default
rm -rf $build_path/sites/default/settings.local.php
cp $conf_path/sites/default/settings.local.php $build_path/sites/default/
# map files directories to volumes so they survive container destruction.
# @see docker-compose.yml
rm -rf $build_path/sites/default/files
ln -sf /var/www_files/public $build_path/sites/default/files
# ln -sf /var/www_files/private $build_path/sites/default/private
chmod -w $build_path/sites/default
