#!/usr/bin/env bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail
# debugging
# set -x

# Create docker-compose .env if necessary.
if [[ ! -f .env ]]; then
    cp env_example .env
fi

# drupal
conf_path=conf/example8
build_path=code/example8
if [ ! -d $build_path ]; then
    echo installing drupal

    #### typically you would checkout your repository.

    #git_origin=
    #git_branch=
    ##git_mirror=

    #git clone --branch "$git_branch" "$git_origin" $build_path

    ### push to mirror repo when pushing to platform repo
    ##git -C $build_path remote add c3 "$git_mirror"
    ##git -C $build_path remote set-url origin --push "$git_origin"
    ##git -C $build_path remote set-url origin --push --add "$git_mirror"
    ##git -C $build_path fetch --all

    #composer install -d $build_path

    #### for this example, we'll create a fresh drupal 8 install.

    mkdir -p $build_path
    composer create-project drupal-composer/drupal-project:8.x-dev $build_path --no-interaction

fi
echo configuring drupal
chmod +w $build_path/web/sites/default
rm -rf $build_path/web/sites/default/settings.local.php
cp $conf_path/web/sites/default/settings.local.php $build_path/web/sites/default/
# config_split
rm -rf $build_path/config-local
cp -r $conf_path/config-local $build_path/config-local
# map files directories to volumes so they survive container destruction.
# @see docker-compose.yml
rm -rf $build_path/web/sites/default/files
ln -sf /var/www_files/public $build_path/web/sites/default/files
#ln -sf /var/www_files/private $build_path/web/sites/default/private
chmod -w $build_path/web/sites/default
