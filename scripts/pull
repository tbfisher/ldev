#!/usr/bin/env bash

# Pull content from production or staging sites.

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail

# Gets the directory containing this file.
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# shellcheck source=inc/util.sh
source "$script_dir/inc/util.sh"

# current directory
pwd_dir=$(pwd)
# git/project root directory
proj_dir=$(util::realpath "$script_dir/..")

# @todo ?
export COLUMNS=80
export LINES=32

# Include docker-compose env.
# shellcheck source=env
source "$script_dir/env"

default_env=dev
pantheon_project=example7
pantheon_project_id=8c5c12cf-e8b4-4fff-8a59-34472c80dba7
drupal_root="$proj_dir/code/example7"
php_container=php
backup_dir="$PULL_CACHEDIR"
backup_prefix="$PULL_PREFIX"

# for docker cmds
cd "$proj_dir"

usage() {
    cat << EOF
usage: $0 [options] [src-key]

Pull database/files from another site.

ARGUMENTS:
    src-key   Environment key. Defaults to "$default_env".

OPTIONS:
    -l        Update pantheon drush aliases and list available src-key values and existing local dumpfiles.
    -b        Backup local database.
    -c        Configure drupal for local development.
    -u        Run database updates after importing the database, and before any configuration.
    -d        Drupal database.
    -p        Prompt for remote backup.
    -D file   Specify local dumpfile.
    -f        R-sync files.
    -F        R-sync private files.
    -v        Verbose output, prints every command to stdout.
    -h        Prints this help message.
EOF
    echo
}

# parse options
list=
drupal_backup=
drupal_config=
drupal_config_update=
drupal_pull=
drupal_pull_create=
drupal_pull_dumpfile=
drupal_pull_files=
drupal_pull_private=
while getopts ":lbcudpD:fFvh" OPTION
do
    case $OPTION in
        l)
            list=yes
            ;;
        b)
            drupal_backup=yes
            ;;
        c)
            drupal_config=yes
            ;;
        u)
            drupal_config_update=yes
            ;;
        d)
            drupal_pull=yes
            drupal_pull_create=yes
            ;;
        p)
            drupal_pull=yes
            ;;
        D)
            drupal_pull=yes
            drupal_pull_dumpfile=$OPTARG
            ;;
        f)
            drupal_pull_files=yes
            ;;
        F)
            drupal_pull_private=yes
            ;;
        v)
            set -x
            ;;
        h)
            usage
            exit
            ;;
        \?)
            util::echo error "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            util::echo error "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# parse arguments
shift "$((OPTIND-1))"
# if $1 is unbound
if [ -z "${1+x}" ]; then
    src_env=$default_env
else
    src_env=$1
fi
src=pantheon.$pantheon_project.$src_env

# environment
if [[ -f $proj_dir/code ]]; then
    util::echo error "no code found at $proj_dir/code, did you run ./scripts/build?"
    exit 1
fi

ensure_drush_alias() {
    # cause script to fail if alias undefined or non-functional
    src_alias=$(drush-local sa "@$src" --format=json | jq '.["'"$src"'"]')
    util::echo info "source alias:"
    echo "$src_alias" | jq
    echo
}

list() {
    # for terminus
    terminus aliases

    local src_envs
    src_envs=$(drush-local sa | grep "pantheon.$pantheon_project" | sed "s/@pantheon\.${pantheon_project}\.//g")
    util::echo info "src-alias values:"
    echo "$src_envs"
    echo

    # ls will non-zero exit if pattern doesn't match
    set +e
    util::echo info 'source dumps (on local):'
    ls -lh "$backup_dir/$backup_prefix.${pantheon_project}_${src_env}_"*.sql.gz
    echo
    util::echo info 'local backups:'
    ls -lh "$backup_dir/$backup_prefix.local."*.sql.gz
    echo
    set -e
}

backup-drupal() {
    local dumpfile dumpfile_size
    dumpfile=$backup_dir/$backup_prefix.local.$(date -u +"%Y-%m-%dT%H:%M:%SZ").sql.gz
    dumpfile_size=$(util::filesize "$backup_dir" "$backup_prefix.local.*.sql.gz")
    drush sql-dump --structure-tables-list=cache,cache*,watchdog | \
        gzip -c | pv -s "$dumpfile_size" > "$dumpfile"
    util::echo info "wrote to $dumpfile"
}

pull-drupal() {
    ensure_drush_alias

    local dumpfile file
    dumpfile=

    # generate backup
    if [[ ! -z "$drupal_pull_create" ]]; then
        util::echo info "generating backup of $src_env environment..."
        echo
        terminus -n --element=database backup:create \
            "$pantheon_project.$src_env"
        util::echo info "figuring backup filename..."
        echo
        local backups
        backups=$(terminus --element=database --format=json backup:list \
            "$pantheon_project.$src_env")
        file=$(echo "$backups" | \
            jq -r 'map( { file, date } ) | sort_by(.date) | last | .file')
        dumpfile="$backup_dir/$backup_prefix.$file"
        util::echo info "downloading backup to $dumpfile ..."
        echo
        terminus backup:get --file="$file" --to="$dumpfile" \
            "$pantheon_project.$src_env"
    # use existing local
    elif [[ ! -z "$1" ]]; then
        # dumpfile exists
        if [[ -f "$1" ]]; then
            dumpfile="$1"
        else
            util::echo error "$1 not found."
            echo
            exit 1
        fi
    fi

    # choose remote
    while [[ -z "$dumpfile" ]]; do
        util::echo info listing source backups...
        echo
        terminus --element=database backup:list "$pantheon_project.$src_env"
        file=$(util::prompt "Choose backup file, or [enter] to refresh")
        case "$file" in
            '')
                ;;
            *)
                dumpfile="$backup_dir/$backup_prefix.$file"
                util::echo info "downloading $file to $dumpfile ..."
                echo
                terminus backup:get --file="$file" --to="$dumpfile" "$pantheon_project.$src_env"
                ;;
        esac
    done

    util::echo info "wiping destination database..."
    echo
    drush -yq sql-drop

    util::echo info "importing..."
    echo
    pv "$dumpfile" | gunzip -c | mysql-pipe
}

fix-volume-perms() {
    local cmds
    # pantheon private dir is in public dir, ensure it exists.
    cmds='mkdir -p /var/www_files/public/private;'
    # ensure files dirs writable by webserver.
    cmds+='chgrp -R www-data /var/www_files/public;'
    cmds+='chmod -R g+w /var/www_files/public;'
    docker-compose exec $php_container /bin/bash -c "$cmds"
}

configure-drupal() {
    local update
    update=$1

    fix-volume-perms

    # drush cc drush
    drush rr

    # download/update dev modules
    # don't fail when offline
    set +e
    drush-local -y dl --destination="$drupal_root/sites/all/modules/local" \
        devel-7.x               \
        log_stdout-7.x          \
        stage_file_proxy-7.x
    drush -y en log_stdout
    set -e

    if [[ ! -z "$update" ]]; then
        drush -y updb
    fi

    drush -y dis \
        new_relic_rpm \
        pantheon_apachesolr \
        pantheon_api \
        pantheon_login
    drush -y en \
        devel \
        stage_file_proxy

    # stage_file_proxy
    drush -y vset stage_file_proxy_origin "http://$src_env-$pantheon_project.pantheonsite.io"

    # search_api_solr
    php=$(cat <<'EOS'
$id = "pantheon";
$options = search_api_server_load($id)->options;
$options["scheme"] = "http";
$options["host"] = "search";
$options["port"] = "8983";
$options["path"] = "/solr";
search_api_server_edit($id, array("options" => $options));
EOS
)
    drush ev "$php"

    drush user-unblock 1
    drush uli 1 admin/reports/status
}

pull-files-drupal() {
    ensure_drush_alias

    local ssh_id
    ssh_id=~/.ssh/id_rsa

    local src container_id jq
    src="$src_env.$pantheon_project_id@appserver.$src_env.$pantheon_project_id.drush.in:files"
    container_id=$(docker-compose ps -q $php_container)
    jq='.[0].Mounts[] | select(.Destination == "/var/www_files/public") | .Source'

    # Private inside public files.
    local dst
    case $1 in
        public)
            dst=$(docker inspect "$container_id" | jq -r "$jq")
            util::echo alert "Attempting rsync to container volume via sudo:"
            util::sudo rsync -e "ssh -p 2222 -i $ssh_id" \
                -rLvz --size-only --ipv4 --progress --delete \
                --exclude=/private \
                --exclude=/css \
                --exclude=/js \
                --exclude=/styles \
                --exclude=/php \
                "$src/" \
                "$dst"
            ;;
        private)
            dst=$(docker inspect "$container_id" | jq -r "$jq")
            util::echo alert "Attempting rsync to container volume via sudo:"
            util::sudo rsync -e "ssh -p 2222 -i $ssh_id" \
                -rLvz --size-only --ipv4 --progress \
                "${src}/private/" \
                "$dst/private"
            ;;
    esac

    fix-volume-perms
}

if [[ ! -d "$backup_dir" ]]; then
    mkdir -p "$backup_dir"
fi

echo

if [[ ! -z "$list" ]]; then
    list
    echo
    exit 0
fi

if [[ ! -z "$drupal_backup" ]]; then
    util::echo info "backing up local drupal database"
    echo
    backup-drupal
    echo
fi

if [[ ! -z "$drupal_pull" ]]; then
    util::echo info "pulling drupal database"
    echo
    pull-drupal "$drupal_pull_dumpfile"
    echo
fi

if [[ ! -z $drupal_config ]]; then
    util::echo info "drupal configure"
    echo
    configure-drupal "$drupal_config_update"
    echo
fi

if [[ ! -z $drupal_pull_files ]]; then
    util::echo info "drupal files"
    echo
    pull-files-drupal public
    echo
fi

if [[ ! -z $drupal_pull_private ]]; then
    util::echo info "drupal private files"
    echo
    pull-files-drupal private
    echo
fi

cd "$pwd_dir"
