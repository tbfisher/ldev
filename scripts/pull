#!/usr/bin/env bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail

# Gets the directory containing this file.
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# shellcheck source=inc/util.sh
source "$script_dir/inc/util.sh"

# current directory
pwd_dir=$(pwd)

# shell window dims for fitting container output to host.
if [ -z "${COLUMNS+x}" ]; then
    export COLUMNS=80
fi
if [ -z "${LINES+x}" ]; then
    export LINES=32
fi

# Include ldev env.
if [ -z "${LDEV_ENV_SCRIPT+x}" ]; then
    LDEV_ENV_SCRIPT="$script_dir/env"
fi
# shellcheck source=env
source "$LDEV_ENV_SCRIPT"

# default env key to pull from.
default_env=dev
# e.g. drush "@$drush_alias_prefix.$default_env"
drush_alias_prefix=example7
# local path to drupal root
drupal_root="$LDEV_PROJ_DIR/code/example7"
# drupal multisite key, e.g. "$drupal_root/sites/$drupal_multisite_id"
drupal_multisite_id=default
# stage_file_proxy origin, if blank will use uri from drush alias
drupal_stage_file_proxy_origin=

usage() {
    cat << EOF
usage: $0 [options] [src-key]

Pull database/files from another site.

ARGUMENTS:
    src-key   Environment key. Defaults to "$default_env".

OPTIONS:
    -l        List available src-key values and existing database dumpfiles.
    -b        Backup local database.
    -c        Configure drupal for local development.
    -u        Run database updates after importing the database, and before any configuration.
    -d        Drupal database.
    -D file   Specify drupal dumpfile.
    -f        R-sync files.
    -F        R-sync private files.
    -v        Verbose output, prints every command to stdout.
    -h        Prints this help message.
EOF
    echo
}

# parse options
list=
drupal_backup=
drupal_config=
drupal_config_update=
drupal_pull=
drupal_pull_dumpfile=
drupal_pull_files=
drupal_pull_private=
while getopts ":lbcudD:fFvh" OPTION
do
    case $OPTION in
        l)
            list=yes
            ;;
        b)
            drupal_backup=yes
            ;;
        c)
            drupal_config=yes
            ;;
        u)
            drupal_config_update=yes
            ;;
        d)
            drupal_pull=yes
            ;;
        D)
            drupal_pull=yes
            drupal_pull_dumpfile=$OPTARG
            ;;
        f)
            drupal_pull_files=yes
            ;;
        F)
            drupal_pull_private=yes
            ;;
        v)
            set -x
            ;;
        h)
            usage
            exit
            ;;
        \?)
            util::echo error "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            util::echo error "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# parse arguments
shift "$((OPTIND-1))"
# if $1 is unbound
if [ -z "${1+x}" ]; then
    src_env=$default_env
else
    src_env=$1
fi
src=$drush_alias_prefix.$src_env

# environment
if [[ -f $LDEV_PROJ_DIR/code ]]; then
    util::echo error "no code found at $LDEV_PROJ_DIR/code, did you run ./scripts/build?"
    exit 1
fi

ensure_cache_dir() {
    if [[ ! -d "$LDEV_PULL_CACHEDIR" ]]; then
        mkdir -p "$LDEV_PULL_CACHEDIR"
    fi
}

ensure_drush_alias() {
    # cause script to fail if alias undefined or non-functional
    src_alias=$(drush-local sa "@$src" --format=json | jq '.["'"$src"'"]')
    util::echo info "source alias:"
    echo "$src_alias" | jq
    echo
}

ensure_perms() {
    local cmds
    # ensure files dirs writable by webserver.
    cmds+="mkdir -p /var/www_files/{public,private}/$drupal_multisite_id;"
    cmds+='chgrp -R www-data /var/www_files/public /var/www_files/private;'
    cmds+='chmod -R g+w /var/www_files/public /var/www_files/private;'
    docker-compose exec $LDEV_PHP_CONTAINER /bin/bash -c "$cmds"
}

list() {
    local src_envs
    src_envs=$(drush-local sa | grep -E "^@$drush_alias_prefix.[^.]+$" | sed "s/@$drush_alias_prefix\.//g")

    util::echo info "src-alias values:"
    echo "$src_envs"
    echo

    # ls will non-zero exit if pattern doesn't match
    set +e
    util::echo info "database dumps:"
    ls -lh "$LDEV_PULL_CACHEDIR/$LDEV_PULL_PREFIX.$drupal_multisite_id."*.sql.gz
    echo
    set -e
}

backup-drupal() {
    ensure_cache_dir

    local dumpfile dumpfile_size
    dumpfile=$LDEV_PULL_CACHEDIR/$LDEV_PULL_PREFIX.$drupal_multisite_id.local.$(date -u +"%Y-%m-%dT%H:%M:%SZ").sql.gz
    dumpfile_size=$(util::filesize "$LDEV_PULL_CACHEDIR" "$LDEV_PULL_PREFIX.$drupal_multisite_id.local.*.sql.gz")
    drush sql-dump --structure-tables-list=cache,cache*,watchdog | \
        gzip -c | pv -s "$dumpfile_size" > "$dumpfile"
    util::echo info "wrote to $dumpfile"
}

pull-drupal() {
    ensure_drush_alias
    ensure_cache_dir

    local dumpfile dumpfile_size
    if [[ -z "$1" ]]; then
        dumpfile=$LDEV_PULL_CACHEDIR/$LDEV_PULL_PREFIX.$drupal_multisite_id.$src_env.$(date -u +"%Y-%m-%dT%H:%M:%SZ").sql.gz
        dumpfile_size=$(util::filesize "$LDEV_PULL_CACHEDIR" "$LDEV_PULL_PREFIX.$drupal_multisite_id.$src_env.*.sql.gz")
        drush-local "@$src" sql-dump --structure-tables-list=cache,cache*,watchdog | \
            gzip -c | pv -s "$dumpfile_size" > "$dumpfile"
        util::echo info "wrote to $dumpfile"
    else
        dumpfile="$1"
        util::echo info "skipping source dump, using $1"
    fi

    drush -yq sql-drop

    util::echo info "importing..."
    echo
    pv "$dumpfile" | gunzip -c | mysql-pipe
}

configure-drupal() {
    ## alias needed for stage_file_proxy config below.
    if [[ -z "$drupal_stage_file_proxy_origin" ]]; then
        ensure_drush_alias
    fi

    local update
    update=$1

    ensure_perms

    # drush cc drush
    drush rr

    # download/update dev modules
    # don't fail when offline
    set +e
    drush-local -y dl --destination="$drupal_root/sites/all/modules/local" \
        devel-7.x               \
        log_stdout-7.x
        #stage_file_proxy-7.x
    drush -y en log_stdout
    set -e

    if [[ ! -z "$update" ]]; then
        drush -y updb
    fi

    drush -y en \
        devel
        #stage_file_proxy

    # stage_file_proxy
    if [[ -z "$drupal_stage_file_proxy_origin" ]]; then
        # uri from status
        origin=$(drush-local "@$src" --format=json status | jq -re '.uri')
        # uri from alias
        #origin=$(drush-local sa "@$src" --format=json | jq -re ".[\"$src\"].uri")
        drush -y vset stage_file_proxy_origin "$origin"
    else
        drush -y vset stage_file_proxy_origin "$drupal_stage_file_proxy_origin"
    fi

    drush user-unblock 1
    drush uli 1 admin/reports/status
}

pull-files-drupal() {
    ensure_drush_alias

    local ssh_id
    ssh_id=~/.ssh/id_rsa

    local status
    status=$(drush-local "@$src" --format=json status)

    local rsync_src container_id
    rsync_src=$(echo "$src_alias" | jq -r '."remote-user" + "@" + ."remote-host"')
    container_id=$(docker-compose ps -q $LDEV_PHP_CONTAINER)

    local jq src dst
    case $1 in
        public)
            src="$rsync_src:$(echo "$status" | \
                jq -r '."%paths"."%root" + "/" + ."%paths"."%files"')"
            jq='.[0].Mounts[] | select(.Destination == "/var/www_files/public") | .Source'
            dst=$(docker inspect "$container_id" | jq -r "$jq")
            util::sudo rsync -e "ssh -i $ssh_id" \
                -rLvz --size-only --ipv4 --progress --delete \
                --exclude=/css \
                --exclude=/js \
                --exclude=/styles \
                --exclude=/php \
                "$src/" \
                "$dst"
            ;;
        private)
            src="$rsync_src:$(echo "$status" | jq -r '."%paths"."%private"')"
            jq='.[0].Mounts[] | select(.Destination == "/var/www_files/private") | .Source'
            dst=$(docker inspect "$container_id" | jq -r "$jq")
            util::sudo rsync -e "ssh -i $ssh_id" \
                -rLvz --size-only --ipv4 --progress --delete \
                --exclude=/backup_migrate \
                "$src/" \
                "$dst"
            ;;
    esac

    ensure_perms
}

# for docker cmds
cd "$LDEV_PROJ_DIR"

echo

if [[ ! -z "$list" ]]; then
    list
    echo
    exit 0
fi

if [[ ! -z "$drupal_backup" ]]; then
    util::echo info "backing up local drupal database"
    echo
    backup-drupal
    echo
fi

if [[ ! -z "$drupal_pull" ]]; then
    util::echo info "pulling drupal database"
    echo
    pull-drupal "$drupal_pull_dumpfile"
    echo
fi

if [[ ! -z $drupal_config ]]; then
    util::echo info "drupal configure"
    echo
    configure-drupal "$drupal_config_update"
    echo
fi

if [[ ! -z $drupal_pull_files ]]; then
    util::echo info "drupal files"
    echo
    pull-files-drupal public
    echo
fi

if [[ ! -z $drupal_pull_private ]]; then
    util::echo info "drupal private files"
    echo
    pull-files-drupal private
    echo
fi

cd "$pwd_dir"
